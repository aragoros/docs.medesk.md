Репликация данных
=================

.. ATTENTION::
   Документация репликации данных имеет статус *DRAFT*, так как могут
   быть произведены изменения в API и самом механизме репликации, в связи
   с чем, необходимо следить за изменениями в сервисе.

В данном разделе предоставлен материал описывающий механизм репликации и
его програмный интерфейс.

1. Основные понятия
-------------------

Под **репликацией данных** в случае работы с MEDESK понимается односторонняя
синхронизация данных: данные на сервере синхронизируются с БД клиента.

Этот механизм необходим при подключении новых клиентов в том случае, когда на
клиентской стороне существуют какие-либо данные, которые клиент хотел бы видеть
в системе. Например, в учреждении есть база данных пациентов или предприятий, с
которыми работает учреждение. Естественно, чтобы продолжить продуктивно работать
с сервером MEDESK необходимо чтобы эти данные так же были видны при работе в
системе. Для этого и существует механизм репликации данных.

В таком механизме предусмотрено последовательное копирование данных в
соответствии с описанными моделями и информации о предыдущих репликацях.
Для более подробного разбора работы механизма репликации уточним некоторые
понятия.

**Модель**, в терминах данной системы - это строго декларированный набор
атрибутов характеризующих определенный тип объекта или субъекта.

Например, модель пациента содержит такие поля общей информации
как "Имя", "Фамилия" и специальные поля, например номер карты
пациента, поля персональных данных и пр.

**Сущность** - экземпляр определенной модели, например, данные об определенном
пациенте, предприи и пр.

Каждая модель, которую возможно репликацировать, предусматривает наличие
специальных полей содержащих информацию о предыдущих репликациях, таких как:

- **Идентификатор репликации** (``repl.id``) - идентификатор, уникальный в рамках
  сущностей одной модели необходимый для связи сущности имеющейся в, например,
  БД клиента и на сервере.

  Очевидно, уникальные идентификаторы сущностей в, например, БД клиента и
  сервера обычно не совпадают. Поэтому при репликации сущности необходимо
  указывать ``repl.id``. То есть:

   1. Сервер не хранит идентификаторы, которыми сущность определяется в БД клиента.

   1. Клиент не хранит идентификаторы, которыми сущность определяется в БД сервера.

  Таким образом нужен специально сформированный, гарантирующий уникальность сущности
  в рамках модели ``repl.id``, чтобы сопоставлять реплицируемые сущности в БД клиента и
  сервера.

  Важно заметить, что сервер хранит ``repl.id`` в модели сущности, никак его не
  модифицируя, в то время как клиент формирует этот его. Чтобы обеспечить
  вышеописанную уникальность этого идентификатора ``repl.id`` (на данный момент),
  следует формировать как строку вида

  ``<идентификатор предприятия в БД сервера>|<идентификатор сущности в БД клиента>``

  Следует учитывать, что после записи в сущность на сервере ``repl.id`` -  его
  нельзя изменить извне, как и не меняется идентификатор клиента-предприятия и
  (как предполагается) идентификатор сущности в БД клиента. После присвоения
  ``repl.id`` сущности он служет только в качестве средства связи между сущностью
  в БД клиента и сервера.

- **Дата изменения** (``repl.ts`` (ts от timestamp) ) - поле содержащее
  последнее время изменения данных сущности. Необходимо для снижения нагрузки
  на сервер, т.е. для того чтобы не копировать сущность когда её время
  модификации совпадает в данных клиента и сервера.

- **Хэш данных сущности** (``repl.hash``) - строка фиксированной длинны
  представляющая собой хэшированные данные сущности. Необходима в случае, если
  в данных клиента не проставляется время изменения, т.е. при совпадении
  хэша в данных клиента и сервера сущность не копируется. (Про расчет хэша данных
  сущности см. 3 подраздел)

  ``repl.ts`` и ``repl.hash`` - изменяемые поля в сущности. В процессе репликации,
  если происходит копирование сущности (т.е. как следует из вышеописанного - данные
  сущности на сервере устарели), то эти поля необходимо обновть на сервере.

  Важно заметить, что в сущности обычно присутствует только одно из полей (хотя наличие
  и ``repl.ts``, и ``repl.hash`` не является ошибкой), но одно из этих полей
  является обязательным.

  Проверка того, была ли модифицирована сущность начинается со сравнения
  ``repl.ts`` возвращаемой сервером с датой модификации сущности в БД клиента. Если
  сущность не предполагает наличие даты модификации, то сравнивается хэш данных
  сущностей на клиенте и сервере. Таким образом проверка по ``repl.ts`` приоритетнее
  проверки по ``repl.hash``, поэтому если в сущности присутствуют оба поля - проверка
  по ``repl.hash`` игнорируется. ( В действительности клиент решает, какое поле
  более для него приоритетное, теи не менее рекомендуется использовать только одно
  из двух и отдавать приоритет сравнению по ``repl.ts``.)

- **Общая информация о репликации** (``repl.ref``) - текст содержащий данные,
  необходимые клиенту для сопоставления реплицированной сущности с данными в,
  например, картотеке или БД клиента. То есть человекочитаемая информация о,
  например, номере карты пациента в картотеке, таблице в БД из которой были
  реплицированны данные и пр., т.е. любые дополнительные данные необходимые
  человеку при работе с реплицированной сущностью. Данное поле включено т.к.
  все вышеописанные поля используются исключетельно в API и
  неинформативны для пользователя. Данное поле не имеет какой либо смысловой
  нагрузки в терминах API и не является обязательным при репликации.

2. API репликации
-----------------

На серверене не предусмотрено отдельных маршрутов для реплицирования, все сущности
реплицируются клиентом посредством запросов ``patch`` и ``post`` на сущность.
Клиент может только получить информацию о предыдущих репликациях используя следующий
запрос:

.. http:post:: /repl

  Получить данные о предыдущих репликациях.

  **Запрос**:

  .. sourcecode:: http

    POST /repl HTTP/1.1
    Host: api.medesk.md
    Cache-Control: no-cache
    Content-Type: application/json

    {
      "enterprises": [
        '540d5833da9d816b7ee1c771|10000064',
        '540d5833da9d816b7ee1c771|10000074',
        '540d5833da9d816b7ee1c771|10000053'
      ],
      "patients": [
        '540d5833da9d816b7ee1c771|80000433',
        '540d5833da9d816b7ee1c771|80000555'
      ],
      "insurances": [
        '540d5833da9d816b7ee1c771|00296666',
        '540d5833da9d816b7ee1c771|00125543'
      ],
      "roles": [
        '540d5833da9d816b7ee1c771|50000001',
        '540d5833da9d816b7ee1c771|50000002'
      ]
    }

  ``enterprises`` и пр. - все поля json представляют собой названия
  реплицируемых сущностей. (На данный момент для репликации доступны
  4 вышеуказанных в json)

  Значениями этих полей являются массивы из ``repl.id`` сущностей, о предыдущей
  репликации которых клиент желает получить информацию.


  **Ответ**:

  .. sourcecode:: http

    HTTP/1.1 200 OK
    Content-Type: application/json

    {
        "enterprises": [{
            "id": "540dc07f42199b1a85da1871",
            "acl": {
                "general": 4,
                "system": 4,
                "subscription": 0,
                "configuration": 4,
                "finance": 0,
                "memberships": 0,
                "replication": 4,
                "acl": 0
            },
            "repl": {
                "id": "540d5833da9d816b7ee1c771|10000064",
                "hash": "d41d8cd98f00b204e9800998ecf8427e"
            }
        }, {
            "id": "540d5833da9d816b7ee1c771",
            "acl": {
                "general": 8,
                "system": 2,
                "subscription": 2,
                "configuration": 8,
                "finance": 2,
                "memberships": 8,
                "replication": 8,
                "acl": 0
            },
            "repl": {
                "hash": "d41d8cd98f00b204e9800998ecf8427e",
                "id": "540d5833da9d816b7ee1c771|10000074",
                "ts": "2013-12-31T20:00:00.000Z"
            }
        }],
        "patients": [{
            "id": "540dca24196da2aa85cc46cf",
            "acl": {
                "general": 4,
                "details": 4,
                "medical": 4,
                "replication": 8,
                "acl": 0
            },
            "repl": {
                "id": "540d5833da9d816b7ee1c771|80000433",
                "ts": "2014-04-15T13:38:51.000Z",
                "hash": "d41d8cd98f00b204e9800998ecf8427e"
            }
        }],
        "insurances": [{
            "id": "540ecc8c637f4b4e8ff7d656",
            "acl": {
                "general": 4,
                "details": 0,
                "configuration": 0,
                "self": 0,
                "replication": 4,
                "acl": 0
            },
            "repl": {
                "id": "540d5833da9d816b7ee1c771|00296666",
                "hash": "d41d8cd98f00b204e9800998ecf8427e"
            }
        }],
        "roles": [{
            "id": "540eeba3af24059d930ecb44",
            "repl": {
                "hash": "d41d8cd98f00b204e9800998ecf8427e",
                "id": "540d5833da9d816b7ee1c771|50000001"
            }
        }]
    }

  В ответе возвращается json такой же структуры, только значения полей
  представляют собой массивы json объектов содержащих всю необходимую информацию
  для репликации.

  - ``id`` - идентификатор сущности на сервере, в данном необходим для
    возожности обновления сущности запросом ``patch``

  - ``acl`` - права доступа к сущности (см. ``Общие положения`` ``->``
    ``Безопасность и контроль доступа`` ``->`` ``Access Control List, покрытия
    и уровни доступа``) Некоторые сущности могут не содержать ``acl``, это не является
    ошибкой и значит только то, что предоставлен доступ к редактированию и добавлению
    этих сущностей.

  - ``repl`` - информация о предыдущей репликации (см. выше).
    Как можно заметить, в ответе может не содержаться ``repl.ts``.

Таким образом, для тех сущностей, для которых в ответе получили json с
соответствующим ``repl.id`` репликация, если необходима повторная, осуществляется
посредством запросов ``patch``(обновление) на конкретные сущности используя ``id`` этих
сущностей.

Для тех сущностей, для которых в ответе не существует соответствующего их
``repl.id`` объекта json, репликация осуществляется запросом ``post``(создание).

**ВАЖНО**: размер json в запросе на репликацию не должен превышать 100кбайт.
По возможности для получения информации по репликации по всем сущностям стоит
разбить один запрос на несколько, например по моделям, т.е. запрос по предприятиям,
запрос по пациентам и пр.

По запросам ``patch`` и ``post`` см. раздел API по соответствующим сущностям.

3. Вычисление хэша данных сущности
----------------------------------

Для расчета ``repl.hash`` необходимо закодировать данные сущности, представленые
строкой, по алгоритму MD5 для получения строки фиксированной длинны (32 символа -
шестнадцатиричных цифр.)

Как представить данные сущности строкой решает клиентская сторона, но настоятельно
рекомендуется чтобы в представлении были включены все данные подлежащие изменению
записанные в строго декларированном порядке.

Например для полисов строка может выглядеть так:
``#<дата создания>#<действителен с>#<действителен до>#<серия>#<номер>#<выдан>#``

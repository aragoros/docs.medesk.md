Репликация данных
=================

В данном разделе предоставлен материал описывающий механизм репликации и
его програмный интерфейс.

1. Основные понятия:
--------------------

Под **репликацией данных** в случае работы с MEDESK понимается односторонняя
синхронизация данных: данные на сервере синхронизируются с БД клиента.

Этот механизм необходим при подключении новых клиентов в том случае, когда на
клиентской стороне существуют какие-либо данные, которые клиент хотел бы видеть
в системе. Например, в учреждении есть база данных пациентов или предприятий, с
которыми работает учреждение. Естественно, чтобы продолжить продуктивно работать
с сервером MEDESK необходимо чтобы эти данные так же были видны при работе в
системе. Для этого и существует механизм репликации данных.

В таком механизме предусмотрено последовательное копирование данных в
соответствии с описанными моделями и информации о предыдущих репликацях.
Для более подробного разбора работы механизма репликации уточним некоторые
понятия.

**Модель**, в терминах данной системы - это строго декларированный набор
атрибутов характеризующих определенный тип объекта или субъекта.

Например, модель пациента содержит такие поля общей информации
как "Имя", "Фамилия" и специальные поля, например номер карты
пациента, поля персональных данных и пр.

**Сущность** - экземпляр определенной модели, например, данные об определенном
пациенте, предприи и пр.

Каждая модель, которую возможно репликацировать, предусматривает наличие
специальных полей содержащих информацию о предыдущих репликациях, таких как:

- **Идентификатор репликации** (``repl.id``) - идентификатор, уникальный в рамках
  сущностей одной модели необходимый для связи сущности имеющейся в, например,
  БД клиента и на сервере.

  Очевидно, уникальные идентификаторы сущностей в, например, БД клиента и
  сервера обычно не совпадают. Поэтому при репликации сущности необходимо
  указывать ``repl.id``. То есть:

   1. Сервер не хранит идентификаторы, которыми сущность определяется в БД клиента.

   1. Клиент не хранит идентификаторы, которыми сущность определяется в БД сервера.

  Таким образом нужен специально сформированный, гарантирующий уникальность сущности
  в рамках модели ``repl.id``, чтобы сопоставлять реплицируемые сущности в БД клиента и
  сервера.

  Важно заметить, что сервер хранит ``repl.id`` в модели сущности, никак его не
  модифицируя, в то время как клиент формирует этот его. Чтобы обеспечить
  вышеописанную уникальность этого идентификатора ``repl.id`` (на данный момент),
  следует формировать как строку вида

  ``<идентификатор предприятия в БД сервера>|<идентификатор сущности в БД клиента>``

  Следует учитывать, что после записи в сущность на сервере ``repl.id`` -  его
  нельзя изменить извне, как и не меняется идентификатор клиента-предприятия и
  (как предполагается) идентификатор сущности в БД клиента. После присвоения
  ``repl.id`` сущности он служет только в качестве средства связи между сущностью
  в БД клиента и сервера.

- **Дата изменения** (``repl.ts`` (ts от timestamp) ) - поле содержащее
  последнее время изменения данных сущности. Необходимо для снижения нагрузки
  на сервер, т.е. для того чтобы не копировать сущность когда её время
  модификации совпадает в данных клиента и сервера.

- **Хэш данных сущности** (``repl.hash``) - строка фиксированной длинны
  представляющая собой хэшированные данные сущности. Необходима в случае, если
  в данных клиента не проставляется время изменения, т.е. при совпадении
  хэша в данных клиента и сервера сущность не копируется. (Про расчет хэша данных
  сущности см. 3 подраздел)

  ``repl.ts`` и ``repl.hash`` - изменяемые поля в сущности. В процессе репликации,
  если происходит копирование сущности (т.е. как следует из вышеописанного - данные
  сущности на сервере устарели), то эти поля необходимо обновть на сервере.

  Важно заметить, что в сущности обычно присутствует только одно из полей (хотя наличие
  и ``repl.ts``, и ``repl.hash`` не является ошибкой), но одно из этих полей
  является обязательным.

  Проверка того, была ли модифицирована сущность начинается со сравнения
  ``repl.ts`` возвращаемой сервером с датой модификации сущности в БД клиента. Если
  сущность не предполагает наличие даты модификации, то сравнивается хэш данных
  сущностей на клиенте и сервере. Таким образом проверка по ``repl.ts`` приоритетнее
  проверки по ``repl.hash``, поэтому если в сущности присутствуют оба поля - проверка
  по ``repl.hash`` игнорируется. ( В действительности клиент решает, какое поле
  более для него приоритетное, теи не менее рекомендуется использовать только одно
  из двух и отдавать приоритет сравнению по ``repl.ts``.)

- **Общая информация о репликации** (``repl.ref``) - текст содержащий данные,
  необходимые клиенту для сопоставления реплицированной сущности с данными в,
  например, картотеке или БД клиента. То есть человекочитаемая информация о,
  например, номере карты пациента в картотеке, таблице в БД из которой были
  реплицированны данные и пр., т.е. любые дополнительные данные необходимые
  человеку при работе с реплицированной сущностью. Данное поле включено т.к.
  все вышеописанные поля используются исключетельно в API и
  неинформативны для пользователя. Данное поле не имеет какой либо смысловой
  нагрузки в терминах API и не является обязательным при репликации.
